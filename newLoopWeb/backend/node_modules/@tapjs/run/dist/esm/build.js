import { foregroundChild } from 'foreground-child';
import { fileURLToPath } from 'node:url';
import { resolveImport } from 'resolve-import';
import { mainCommand } from './main-config.js';
const tmbin = fileURLToPath(await resolveImport('@tapjs/test/generate-tap-test-class'));
const execArgs = ['--loader=ts-node/esm', '--no-warnings'];
const node = process.execPath;
export const build = async (args, config) => {
    if (args.length !== 0) {
        throw new TypeError('build command does not take positional arguments');
    }
    const argv = [...execArgs, tmbin, ...config.pluginList];
    return new Promise((res, rej) => {
        foregroundChild(node, argv, {}, (code, signal) => {
            // if this is the main command, just terminate in the same way
            // otherwise, let the promise communicate the build status
            if (mainCommand === 'build') {
                res();
                return;
            }
            if (code || signal) {
                rej(Object.assign(new Error('build failed'), {
                    code,
                    signal,
                }));
            }
            else {
                res();
            }
            return false;
        });
    });
};
//# sourceMappingURL=build.js.map